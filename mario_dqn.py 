import random
import gym
import numpy as np
from collections import deque
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from skimage.color import rgb2gray

EPISODES = 10

class DQNAgent:
    def __init__(self, row,width,depth,action_size):
        self.state_size = (row,width,depth)
        self.action_size = action_size
        self.memory = deque(maxlen=2000)
        ###Parameters
        self.gamma=0.95 # discount rate
        self.epsilon = 1.0 # exploration rate
        self.epsilon_min = 0.01 # minimum exploration rate
        self.epsilon_decay = 0.995
        self.learning_rate = 0.001 # used for gradient descent
        self.model = self._build_model()

    def _build_model(self):
        # Neural network for Deep-Q Learning model
        # Will update model with more sophisticated
        # CNN
        model = Sequential()
        model.add(Dense(24, input_shape=self.state_size, activation="relu"))
        model.add(Dense(24, activation="relu"))
        model.add(Dense(self.action_size, activation="linear"))
        model.compile(loss="mse",
                        optimizer=Adam(lr=self.learning_rate))

        return model

    def remember(self,state,action,reward,next_state,done):
        # Stores past information into a list for later recall
        self.memory.append((state,action,reward,next_state,done))

    def act(self, state):
        # Tells the agent what action it should take
        # Since we are using a MultiDiscrete of size
        # 6, we will want to generate a random array
        # of bits i.e. [0,0,0,1,1,0]
        # MultiDiscrete is used for represented buttons
        if np.random.rand() <= self.epsilon:
            return np.random.randint(2, size=6)
        act_value = self.model.predict(state)
        return np.argmax(act_value[0])

    def replay(self, batch_size):
        # Picks random instance from the memory list and batches
        # over it.
        minibatch = random.sample(self.memory, batch_size)
        for state, action, reward, next_state, done in minibatch:
            target = reward
            if not done:
                # We will break up the preceeding code to define
                # our loss function
                target = reward + self.gamma * \
                        np.amax(self.model.predict(next_state))
                target_f = self.model.predict(state)
                target_f[0][action] = target
                self.model.fit(state, target_f, epochs=1, verbose=0)
            if self.epsilon > self.epsilon_min:
                self.epsilon *= self.epsilon_decay

    def load(self,name):
        #loads weights from keras h5 file
        self.model.load_weights(name)

    def save(self,name):
        #save weights from keras h5 file
        self.model.save_weights(name)


def preprocess(observation):
    return np.resize(rgb2gray(observation), (84,84))

if __name__ == "__main__":
    # Initialize gym environment
    env = gym.make('SuperMarioBros-1-1-v0')
    state_size = env.observation_space.shape
    action_size = env.action_space.shape
    # create agent
    agent = DQNAgent(state_size[0],state_size[1],state_size[2], action_size)

    print(type(state_size))
    print(state_size)
    print(action_size)

    done = False
    batch_size = 32

    # Iterate the game
    for e in range(EPISODES):
        print(e)
        print("New episode")
        state = env.reset()
        print(type(state))
        print(state.shape)
        #state = preprocess(state)
        state = np.expand_dims(state,axis=0)
        print(state.shape)
        total_reward = 0
        # time_t represents each frame of the game

        for time in range(10000000):
            env.render()

            # Decide action
            action = agent.act(state)

            # Advance the game to the next frame
            next_state, reward, done, _ = env.step(action)
            #print(next_state.shape)
            reward = reward if not done else -10
            next_state = np.expand_dims(next_state,axis=0)
            #print(next_state.shape)
            # Remember the previous state, action, reward, and done
            agent.remember(state,action,reward,next_state,done)

            # make next_state the current state
            state = next_state
            #print(info)

            # done becomes True when the game is finished
            if done:
                done = False
                print("episode: {}/{}, score: {}, e: {:.2}"
                    .format(e,EPISODES,time,agent.epsilon))
                break

        if len(agent.memory) > batch_size:
            agent.replay(batch_size)

        '''if e % 10 == 0:
            agent.save("mario_dqn.h5")
        '''
        #agent.replay(10)
